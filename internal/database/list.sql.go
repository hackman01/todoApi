// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: list.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const addItem = `-- name: AddItem :one

INSERT INTO list (id,item,created_at,updated_at)
VALUES ($1,$2,$3,$4)
RETURNING id, item, created_at, updated_at
`

type AddItemParams struct {
	ID        uuid.UUID
	Item      string
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) AddItem(ctx context.Context, arg AddItemParams) (List, error) {
	row := q.db.QueryRowContext(ctx, addItem,
		arg.ID,
		arg.Item,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i List
	err := row.Scan(
		&i.ID,
		&i.Item,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteItem = `-- name: DeleteItem :one

DELETE FROM list
WHERE id=$1
RETURNING id, item, created_at, updated_at
`

func (q *Queries) DeleteItem(ctx context.Context, id uuid.UUID) (List, error) {
	row := q.db.QueryRowContext(ctx, deleteItem, id)
	var i List
	err := row.Scan(
		&i.ID,
		&i.Item,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getItems = `-- name: GetItems :many

SELECT id, item, created_at, updated_at FROM list
`

func (q *Queries) GetItems(ctx context.Context) ([]List, error) {
	rows, err := q.db.QueryContext(ctx, getItems)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []List
	for rows.Next() {
		var i List
		if err := rows.Scan(
			&i.ID,
			&i.Item,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateItem = `-- name: UpdateItem :one

Update list 
SET item=$1, updated_at = NOW()
where id=$2
RETURNING id, item, created_at, updated_at
`

type UpdateItemParams struct {
	Item string
	ID   uuid.UUID
}

func (q *Queries) UpdateItem(ctx context.Context, arg UpdateItemParams) (List, error) {
	row := q.db.QueryRowContext(ctx, updateItem, arg.Item, arg.ID)
	var i List
	err := row.Scan(
		&i.ID,
		&i.Item,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
